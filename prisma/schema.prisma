// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  phoneNumber   String?
  company       String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String

  subServices SubService[]
  packages    Package[]

  @@map("services")
}

model SubService {
  id          String    @id @default(cuid())
  name        String
  description String
  serviceId   String
  packages    Package[]

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("sub_services")
}

model Package {
  id           String   @id @default(cuid())
  serviceId    String?
  subServiceId String?
  name         String
  priceByYear  Float?
  priceByMonth Float?
  price        Float?
  description  String
  points       String[]

  service    Service?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  subService SubService? @relation(fields: [subServiceId], references: [id], onDelete: Cascade)

  cart   Cart[]
  orders OrderPackage[]

  @@map("packages")
}

model Order {
  id       String         @id @default(cuid())
  userId   String
  price    Int
  packages OrderPackage[]
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderPackage {
  orderId   String
  packageId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@id([orderId, packageId])
}

model Cart {
  id              String   @id @default(cuid())
  userId          String?
  packageId       String?
  quantity        Int      @default(1)
  packageDuration Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  package         Package? @relation(fields: [packageId], references: [id], onDelete: Cascade)
}
